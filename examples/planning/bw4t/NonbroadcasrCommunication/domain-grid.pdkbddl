

(define (domain bw4tlead2)



  (:agents a b c)
  (:requirements :strips :typing )

  (:types color room place id)

  (:predicates 
	    {AK}(at ?ag - agent ?place - place)
                (block ?colorid - color ?id - id ?placeid - room)

	    
            {AK}(connected ?r1 - place ?r2 - place)
                        {AK}(connected ?r1 - place ?r2 - room)
                                    {AK}(connected ?r1 - room ?r2 - place)

                (hiddenblock ?colorid - color ?id - id ?placeid - room)  
            {AK}(checked ?placeid - room)

            {AK}(in ?ag - agent ?roomid - room)

	        {AK}(holding ?ag - agent ?colorid - color ?id - id ?placeid - room)
		{AK}(atblock ?colorid - color ?id - id ?placeid - room)
		{AK}(atblockbot)
                    ;(obs ?colorid - color ?id - id ?placeid - room)
	        {AK}(droplocation ?loc - room)
                {AK}(handempty)
                {AK}(leader ?ag - agent)
                {AK}(bet ?ag - agent)
    ) 
    






  (:action goto
             :derive-condition   always
	     :parameters (?ag - agent ?placeid - place ?currplace - room)
	     :precondition (and (in ?ag ?currplace) (handempty) (connected ?currplace ?placeid) (not(leader ?ag))) 
	     :effect
	     (and (not(in ?ag ?currplace)) (at ?ag ?placeid)
				)
  )

  (:action goto
             :derive-condition   always
	     :parameters (?ag - agent ?placeid - room ?currplace - place)
	     :precondition (and (at ?ag ?currplace) (handempty) (connected ?currplace ?placeid) (not(leader ?ag)))
	     :effect
	     (and (not(at ?ag ?currplace)) (in ?ag ?placeid)
				)
  )

  (:action goto
             :derive-condition   always
	     :parameters (?ag - agent ?placeid - place ?currplace - place)
	     :precondition (and (at ?ag ?currplace) (handempty) (connected ?currplace ?placeid) (not(leader ?ag)))
	     :effect
	     (and (not(at ?ag ?currplace)) (at ?ag ?placeid)
				)
  )
  
;;;





           
  (:action gotodrop
             :derive-condition   always
	     :parameters (?ag - agent ?placeid - place ?currplace - room)
	     :precondition (and (in ?ag ?currplace) (not (handempty)) (connected ?currplace ?placeid) (not(leader ?ag)))
	     :effect
	     (and (not(in ?ag ?currplace)) (at ?ag ?placeid)) 
  )

  (:action gotodrop
             :derive-condition   always
	     :parameters (?ag - agent ?placeid - room ?currplace - place)
	     :precondition (and (at ?ag ?currplace) (not (handempty)) (connected ?currplace ?placeid) (not(leader ?ag)))
	     :effect
	     (and (not(at ?ag ?currplace)) (in ?ag ?placeid)) 
  )

  (:action gotodrop
             :derive-condition   always
	     :parameters (?ag - agent ?placeid - place ?currplace - place)
	     :precondition (and (at ?ag ?currplace) (not (handempty)) (connected ?currplace ?placeid) (not(leader ?ag)))
	     :effect
	     (and (not(at ?ag ?currplace)) (at ?ag ?placeid)) 
  )

;;;

  
  

  (:action observe
             :derive-condition   always
             :parameters         (?ag - agent ?placeid - room ?colorid - color ?id - id)
             :precondition       (and(in ?ag ?placeid) (handempty) (not (droplocation ?placeid)) (not(leader ?ag)))
             :effect             (and(when (hiddenblock ?colorid ?id ?placeid) [?ag](block ?colorid ?id ?placeid)) 
                                     (when (!hiddenblock ?colorid ?id ?placeid) [?ag](!block ?colorid ?id ?placeid))
                                     (checked ?placeid)) 
   )




	 
  (:action gotoblock
             :derive-condition   always
	     :parameters (?ag - agent ?colorid - color ?placeid - room ?id - id)
	     :precondition (and (in ?ag ?placeid) [?ag](block ?colorid ?id ?placeid) (handempty) (not (atblockbot)) (not(leader ?ag)))
	     :effect 
	          (and (atblock ?colorid ?id ?placeid) (atblockbot))) 	 




		   
  (:action pickup
             :derive-condition   always
	     :parameters         (?ag - agent ?colorid - color ?id - id ?placeid - room)
	     :precondition       (and (in ?ag ?placeid) [?ag](block ?colorid ?id ?placeid) (atblock ?colorid ?id ?placeid)
                                                        (handempty)
							(not (droplocation ?placeid)) (not(leader ?ag)) 
				 )  
	     :effect
	                        (and (holding ?ag ?colorid ?id ?placeid) 
				     (not (handempty)) (not (atblockbot)))) 
 






  (:action putdown
             :derive-condition   always
	     :parameters        (?ag - agent ?colorid - color ?id - id ?placeid - room ?dropzone - room)
	     :precondition      (and (holding ?ag ?colorid ?id ?placeid) (in ?ag ?dropzone) (droplocation ?dropzone))
                                                                    
                                                                 
	     :effect
	           (and (not (holding ?ag ?colorid ?id ?placeid))
		   	[?ag](!block ?colorid ?id ?placeid)
		        [?ag](block ?colorid ?id ?dropzone)
		   	(handempty)
		   ))

    (:action msgall
              :derive-condition   always
              :parameters         (?placeid - room ?n ?ag - agent ?colorid - color ?id - id)
              :precondition       (and (in ?n ?placeid) (bet ?n) [?n](block ?colorid ?id ?placeid) (leader ?ag)) 
              :effect             (and ;(obs ?colorid ?id ?placeid) 
                                     [?ag](block ?colorid ?id ?placeid))
                                  
         )


    
)

